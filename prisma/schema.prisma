generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int         @id @default(autoincrement())
  email             String      @unique
  hashedPassword          String // How private? I dunno how this stuff works
  firstName         String?
  lastName          String?
  birthDate         DateTime? // Not sure what type of field
  userName          String?     @unique// Public facing name? for privacy etc
  userStatus        UserStatus  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  authoredWorkout      Workout[] @relation("AuthorWorkouts") // workouts they have created
}

model Exercise {
  id              Int                   @id @default(autoincrement())
  name            String                @unique
  slug            String                @unique
  description     String?
  instruction     String?
  difficulty      Difficulty            @default(Beginner)
  status          Status                @default(ACTIVE)
  media           Media[]               @relation("ExerciseMedia")
  featured        FeatureExercise?
  equipment       Equipment[]           @relation("ExerciseToEquipment")
  muscleGroup     MuscleGroup[]         @relation("ExerciseToGroup")
  targetMuscle    TargetMuscle[]        @relation("ExerciseToMuscle")
  workouts        ExerciseWorkout[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  exerciseHistory ExerciseHistory[]
}

model Workout {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  slug          String      @unique
  description   String?
  authorId      Int
  author        User @relation("AuthorWorkouts", fields: [authorId], references: [id])
  exercises     ExerciseWorkout[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  workoutHistory      WorkoutHistory[]
}

model ExerciseWorkout {
  workoutId           Int
  exerciseId          Int
  order               Int?
  note                String?
  intensity           Int?
  intendedSets        IntendedSets[]
  duration            Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  exercise  Exercise  @relation(fields: [exerciseId], references: [id])
  workout   Workout   @relation(fields: [workoutId], references: [id])

  @@id([workoutId, exerciseId])
}

model IntendedSets {
  id          Int                       @id @default(autoincrement())
  setNumber   Int
  reps        Int?
  weight      Float?
  workoutId   Int
  exerciseId  Int
  exerciseWorkout     ExerciseWorkout   @relation(fields: [workoutId, exerciseId], references: [workoutId, exerciseId])
  
  @@index([workoutId, exerciseId])
}

model WorkoutHistory {
  id          Int                   @id @default(autoincrement())
  workout     Workout               @relation(fields: [workoutId], references: [id])
  workoutId   Int
  exerciseHistory ExerciseHistory[]
  note        String?

  startTime   DateTime
  endTime     DateTime
}

model ExerciseHistory {
  id                Int             @id @default(autoincrement())
  exercise          Exercise        @relation(fields: [exerciseId], references: [id])
  exerciseId        Int
  workoutHistory    WorkoutHistory  @relation(fields: [workoutHistoryId], references: [id])
  workoutHistoryId  Int
  sets              SetHistory[]
}

model SetHistory {
  id                  Int               @id @default(autoincrement())
  exerciseHistory     ExerciseHistory   @relation(fields: [exerciseHistoryId], references: [id])
  exerciseHistoryId   Int
  setNumber           Int?
  repsComplete        Int?
  weight              Float?
}

model FeatureExercise {
  id         Int      @id @default(autoincrement())
  exerciseId Int      @unique
  featuredAt DateTime @default(now())
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model MuscleGroup {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  exercise    Exercise[] @relation("ExerciseToGroup")
}

model TargetMuscle {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  exercise    Exercise[] @relation("ExerciseToMuscle")
}

model Equipment {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String?
  exercise    Exercise[] @relation("ExerciseToEquipment")
}

model Media {
  id          Int         @id @default(autoincrement())
  mediaKey    String
  type        MediaType
  exercise    Exercise    @relation("ExerciseMedia", fields: [exerciseId], references: [id])
  exerciseId  Int
  createdAt   DateTime    @default(now())
}

enum Status {
  ACTIVE
  FEATURED
  ARCHIVED
}

enum Difficulty {
  Beginner
  Intermediate
  Advanced
}

enum MediaType {
  THUMBNAIL
  VIDEO
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  ADMIN
}
